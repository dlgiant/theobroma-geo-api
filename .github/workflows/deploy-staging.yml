name: Deploy to Staging (Simple)

on:
  push:
    branches:
      - 'feature/**'
      - 'hotfix/**'
      - 'develop'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-test:
    name: Build and Test Docker Image
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      packages: write
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix=staging-
          type=raw,value=staging-latest,enable={{is_default_branch}}
        labels: |
          org.opencontainers.image.title=Theobroma Geo API
          org.opencontainers.image.description=FastAPI microservice for cocoa plantation monitoring
          
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64
        
    - name: Test Docker image
      run: |
        # Get the first tag from the output
        IMAGE_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n1)
        echo "Testing image: $IMAGE_TAG"
        
        # Start PostgreSQL for testing
        docker run -d \
          --name test-postgres \
          -e POSTGRES_PASSWORD=test_password \
          -e POSTGRES_USER=test_user \
          -e POSTGRES_DB=test_theobroma \
          -p 5432:5432 \
          postgis/postgis:13-3.1
          
        # Wait for PostgreSQL to be ready
        sleep 15
        
        # Start the API container
        docker run -d \
          --name test-api \
          --link test-postgres:postgres \
          -e DATABASE_URL="postgresql://test_user:test_password@postgres:5432/test_theobroma" \
          -e ENVIRONMENT="staging" \
          -p 8000:8000 \
          $IMAGE_TAG
          
        # Wait for API to start
        sleep 20
        
        # Test health endpoint
        for i in {1..30}; do
          if curl -f http://localhost:8000/health; then
            echo "✅ Health check passed"
            break
          else
            echo "⏳ Waiting for API to be ready... ($i/30)"
            sleep 2
          fi
        done
        
        # Test other endpoints
        echo "Testing API endpoints..."
        curl -s http://localhost:8000/farms | jq . || echo "Farms endpoint test"
        curl -s http://localhost:8000/trees | jq . || echo "Trees endpoint test"
        
        # Show logs for debugging
        echo "API Container logs:"
        docker logs test-api --tail 50
        
        # Cleanup
        docker stop test-api test-postgres
        docker rm test-api test-postgres
        
        echo "✅ Staging image build and test completed successfully"

  deploy-info:
    name: Generate Staging Deployment Info
    runs-on: ubuntu-latest
    needs: build-and-test
    if: always()
    
    steps:
    - name: Generate deployment summary
      run: |
        echo "## 🚀 Staging Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "**Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "**Docker Image**: ${{ needs.build-and-test.outputs.image-tag }}" >> $GITHUB_STEP_SUMMARY
        echo "**Build Status**: ${{ needs.build-and-test.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.build-and-test.result }}" == "success" ]]; then
          echo "### ✅ Deployment Ready" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Your Docker image has been built and tested successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### 🐳 Run Locally:" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "# Pull the image" >> $GITHUB_STEP_SUMMARY
          echo "docker pull $(echo '${{ needs.build-and-test.outputs.image-tag }}' | head -n1)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# Run with PostgreSQL" >> $GITHUB_STEP_SUMMARY
          echo "docker run -d --name postgres -e POSTGRES_PASSWORD=password -e POSTGRES_USER=user -e POSTGRES_DB=theobroma -p 5432:5432 postgis/postgis:13-3.1" >> $GITHUB_STEP_SUMMARY
          echo "docker run -d --name theobroma-api --link postgres:postgres -e DATABASE_URL='postgresql://user:password@postgres:5432/theobroma' -p 8000:8000 $(echo '${{ needs.build-and-test.outputs.image-tag }}' | head -n1)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# Test the API" >> $GITHUB_STEP_SUMMARY
          echo "curl http://localhost:8000/health" >> $GITHUB_STEP_SUMMARY
          echo "curl http://localhost:8000/docs" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### 🔍 Available Endpoints:" >> $GITHUB_STEP_SUMMARY
          echo "- Health Check: `http://localhost:8000/health`" >> $GITHUB_STEP_SUMMARY
          echo "- API Docs: `http://localhost:8000/docs`" >> $GITHUB_STEP_SUMMARY
          echo "- Interactive API: `http://localhost:8000/redoc`" >> $GITHUB_STEP_SUMMARY
          echo "- Farms: `http://localhost:8000/farms`" >> $GITHUB_STEP_SUMMARY
          echo "- Trees: `http://localhost:8000/trees`" >> $GITHUB_STEP_SUMMARY
          echo "- Lots: `http://localhost:8000/lots`" >> $GITHUB_STEP_SUMMARY
          echo "- Security Events: `http://localhost:8000/security-events`" >> $GITHUB_STEP_SUMMARY
          echo "- Metrics: `http://localhost:8000/metrics`" >> $GITHUB_STEP_SUMMARY
        else
          echo "### ❌ Deployment Failed" >> $GITHUB_STEP_SUMMARY
          echo "The Docker image build or testing failed. Please check the logs above." >> $GITHUB_STEP_SUMMARY
        fi
